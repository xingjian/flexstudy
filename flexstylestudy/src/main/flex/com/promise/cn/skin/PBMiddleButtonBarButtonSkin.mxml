<?xml version="1.0" encoding="utf-8"?>
<s:SparkButtonSkin xmlns:fx="http://ns.adobe.com/mxml/2009"  creationComplete="creationCompleteHandler(event)"
                   xmlns:s="library://ns.adobe.com/flex/spark" stateChangeComplete="stateChangeCompleteHandler(event)" 
                   xmlns:fb="http://ns.adobe.com/flashbuilder/2009"
				   width="{img.width}" height="{img.height}"
                   alpha.disabledStates="0.5">
	<fx:Metadata>[HostComponent("spark.components.ButtonBarButton")]</fx:Metadata>
    <!-- host component -->
    <fx:Script fb:purpose="styling">
        
		<![CDATA[
			import mx.controls.Alert;
			import mx.events.FlexEvent;
			
			import spark.components.ButtonBar;
			import spark.components.ButtonBarButton;
			
			[Bindable]
			public var dataObj:Object;
			
			protected function creationCompleteHandler(event:FlexEvent):void{
				var bbb:ButtonBarButton  = hostComponent as ButtonBarButton;
				dataObj = bbb.data;
				img.source = dataObj.iconnormal;
				bbb.toolTip = dataObj.toolTip;
			}
			
        static private const exclusions:Array = ["labelDisplay"];

        override public function get colorizeExclusions():Array {return exclusions;}
        
        override protected function initializationComplete():void
        {
            useChromeColor = true;
            super.initializationComplete();
        }
        
  
        
        private var cornerRadius:Number = 2;

		protected function stateChangeCompleteHandler(event:FlexEvent):void{
			if(currentState.indexOf("Selected")!=-1){
				if(img.source != dataObj.iconselect){
					img.source = dataObj.iconselect;
				}
			}else{
				if(img.source != dataObj.iconnormal){
					img.source = dataObj.iconnormal
				}
			}
		}
		]]>
	</fx:Script>
    <!-- states -->
    <s:states>
        <s:State name="up" />
        <s:State name="over" stateGroups="overStates" />
        <s:State name="down" stateGroups="downStates" />
        <s:State name="disabled" stateGroups="disabledStates" />
        <s:State name="upAndSelected" stateGroups="selectedStates, selectedUpStates" />
        <s:State name="overAndSelected" stateGroups="overStates, selectedStates" />
        <s:State name="downAndSelected" stateGroups="downStates, selectedStates" />
        <s:State name="disabledAndSelected" stateGroups="selectedUpStates, disabledStates, selectedStates" />
    </s:states>

	<s:Graphic>
		<s:BitmapImage id="img" smooth="true"  />
	</s:Graphic>
	<s:Rect id="border" left="-1" right="-1" top="-1" bottom="-1" radiusX="2"  includeIn="downAndSelected">
		<s:fill> 
			<s:LinearGradient> 
				<s:GradientEntry color="#00A0E8" alpha="1"/> 
			</s:LinearGradient> 
		</s:fill> 
	</s:Rect>
	<s:Rect id="shadow" left="0" right="0" top="0" bottom="0"  radiusX="2" includeIn="downAndSelected">
		<s:fill>
			<s:LinearGradient rotation="90"> 
				<s:GradientEntry color="#E5F1F8" alpha="1"/> 
				<s:GradientEntry color="#A9D0E9" alpha="1"/> 
			</s:LinearGradient>
		</s:fill>
	</s:Rect>
</s:SparkButtonSkin>
